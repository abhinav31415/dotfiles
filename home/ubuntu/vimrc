" This configuration file was tested with
"       /usr/local/bin/vim (7.0) and
"       /usr/local/bin/gvim (7.0)
"this line prevents copydotfiles from recopying: dot-vimrc_included
set nocompatible               " be iMproved
" for Pathogen
" Exclude ultisnips for now, it seems to be messing with YCM
let g:pathogen_disabled = []
call add(g:pathogen_disabled, 'ultisnips')

execute pathogen#infect()
execute pathogen#helptags()

" VUNDLE
filetype off                   " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
Bundle 'Valloric/YouCompleteMe' 

filetype plugin indent on     " required!
syntax on

syntax enable
set background=dark
colorscheme solarized

" Force close the YCM suggestion box after completion
let g:ycm_autoclose_preview_window_after_completion = 1
" Seed with keywords from syntax for that filetype
let g:ycm_seed_identifiers_with_syntax = 1

" Force syntastic to use pyflakes for python, since it's supposed to be faster
let g:syntastic_python_checkers=['pyflakes']

" Regular stuff
" set term=dtterm 
set et                          " expand tab
set ts=4                        " tab stop
set sw=4                        " sift width
set sts=4                       " soft tab stop
set bs=indent,eol,start         " backspace behaviour
set ai                          " auto indent
set si                          " smart indent
set nocin                       " no C-indent
set ru                          " runtime : allow runtime commands
set nu                          " line numbers

set incsearch                   " show search matches as you type
set hlsearch                    " highlight search terms

set nobackup                    " no backup files
set noswapfile                  " no swap files

" Ignore the following file types in wildcard expansions
set wildignore=*.sw?,*.o,*.obj,*.tsk,*.pyc,*.*~

set listchars=tab:▸\ ,eol:¬

" Function defintions
" Function to strip trailing spaces
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Preserve saves cursor position
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Mappings start here
nnoremap <silent> ,/ :nohlsearch<CR> " toggle hlsearch
nnoremap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Map <Ctrl><Shift>f to find all occurences of the word under the cursor and
" popuplate it in the quickfix area and open it up
nnoremap <Leader>f :vim/<C-r><C-w>/gj *.*<CR>:cw<CR>
vnoremap <Leader>f <C-o> :vim/<C-r><C-w>/gj *.*<CR>:cw<CR>

" <Ctrl>s -> save
noremap <silent> <C-s> :update<CR>
inoremap <silent> <C-s> <C-c>:update<CR>
vnoremap <silent> <C-s> <C-o>:update<CR>

" <Ctrl>q -> save and quit
noremap <silent> <C-q> :update<CR>:quit<CR>
inoremap <silent> <C-q> <C-c>:update<CR>:quit<CR>
vnoremap <silent> <C-q> <C-o>:update<CR>:quit<CR>

" Function key mappings
" Map <F7> to change to Titlecase
nnoremap <F7> :s/\<\(\w\)\(\w*\)\>/\u\1\L\2/g<CR>   " Change to Titlecase
" Map F5 to toggle Gundo
noremap <F5> :GundoToggle<CR>
"Don't need this mapping for now as we have the Preserve mapping
"nnoremap <silent> <F5> :call <SID>StripTrailingWhitespaces()<CR>

" Leader (\) mappings
" Map \l to show listchars
nnoremap <Leader>l :set list!<CR>
" Map \s to replace current word with
nnoremap <Leader>s :%s/\<<C-r><C-w>\>/
" Bind <Leader>z to NerdTree toggle
nnoremap <Leader>z :NERDTreeToggle<CR>
" Map <Leader>v to open vimrc in a new tab
nnoremap <Leader>v :tabedit $MYVIMRC<CR>
" Map \bc to comment multiple lines in C-style
noremap <Leader>bc :s/^/\/\//
" Map \bu to uncomment multiple lines in C-style
noremap <Leader>bu :s/^\/\///
" Map \sc to comment multiple lines in shell-style
noremap <Leader>sc :s/^/#/
" Map \su to uncomment multiple lines in shell-style
noremap <Leader>su :s/^#//

" Indentation in normal and visual mode
nnoremap <Tab>    >>
nnoremap <S-Tab>  <<
vnoremap <Tab>    >gv
vnoremap <S-Tab>  <gv

" buffer toggle 
" gt -> forward
" gT -> back
" gB -> previous
nnoremap gB <C-^>

" disable the arrow keys for navigation
" h,j,k,l - w,b - A,I
nnoremap <Up>    <NOP>
nnoremap <Down>  <NOP>
nnoremap <Left>  <NOP>
nnoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
inoremap <Left>  <NOP>
inoremap <Right> <NOP>

" Bubble single lines
nnoremap <C-Up> [e
nnoremap <C-Down> ]e
" Bubble multiple lines
vnoremap <C-Up> [egv
vnoremap <C-Down> ]egv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Mappings to open defintion in a new tab/split
" C-] - go to definition
" C-T - Jump back from the definition.
" C-W C-] - Open the definition in a horizontal split 
noremap <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
noremap <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" autocmd stuff
if has ("autocmd")
    filetype on " in case I delete that before this

    " Make files are finnicky about tabs and spaces
    autocmd FileType make noexpandtab

    " Treat .config files as XML (autocomplete)
    autocmd BufNewFile,BufRead *.config setfiletype xml

    " Fugitive statusline changes
    autocmd BufReadPost fugitive://* set bufhidden=delete

    " allow extra highlighting for CPP style
    " don't know if I still need this with syntastic
    " autocmd Syntax cpp call EnhanceCppSyntax()
    ""autocmd bufwritepost .vimrc source $MYVIMRC

    " Start NerdTree automatically when vim starts
    " autocmd vimenter * NERDTree
    autocmd vimenter * if !argc() | :e $MYVIMRC | set syntax=on | endif
    autocmd vimenter * if !argc() | NERDTree | endif
endif

set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
